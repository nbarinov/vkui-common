// Do this as the first thing so that any code reading it knows the right env.
process.env.BABEL_ENV = 'development';
process.env.NODE_ENV = 'development';

// Makes the script crash on unhandled rejections instead of silently
// ignoring them. In the future, promise rejections that are not handled will
// terminate the Node.js process with a non-zero exit code.
process.on('unhandledRejection', err => {
  throw err;
});

// Ensure environment variables are read.
require('../config/env');

const chalk = require('chalk');
const webpack = require('webpack');
const WebpackDevServer = require('webpack-dev-server');
const clearConsole = require('../config/utils/clearConsole');
const checkRequiredFiles = require('../config/utils/checkRequiredFiles');
const {
  choosePort,
  createCompiler,
  prepareUrls
} = require('../config/utils/WebpackDevServerUtils');
const openBrowser = require('../config/utils/openBrowser');
const paths = require('../config/paths');
const configFactory = require('../config/webpack.config');
const createDevServerConfig = require('../config/webpackDevServer.config');
const isInteractive = process.stdout.isTTY;

// Warn and crash if required files are missing
if (!checkRequiredFiles([paths.appIndexJs])) {
  process.exit(1);
}

const HOST = '0.0.0.0';
const PORT = parseInt(process.env.PORT, 10) || 3000;

// We require that you explicitly set browsers and do not fall back to
// browserslist defaults.
Promise.resolve()
  .then(() => {
    return choosePort(HOST, PORT);
  })
  .then(port => {
    if (port == null) {
      // We have not found a port.
      return;
    }

    const config = configFactory;
    const protocol = 'http';
    const appName = require(paths.appPackageJson).name;

    const urls = prepareUrls(
      protocol,
      HOST,
      port,
      paths.publicUrlOrPath.slice(0, -1)
    );
    const devSocket = {
      warnings(warnings) {
        devServer.sockWrite(devServer.sockets, 'warnings', warnings);
      },
      errors(errors) {
        devServer.sockWrite(devServer.sockets, 'errors', errors);
      }
    };
    // Create a webpack compiler that is configured with custom messages.
    const compiler = createCompiler({
      appName,
      config,
      devSocket,
      urls,
      webpack
    });
    // Serve webpack assets generated by the compiler over a web server.
    const serverConfig = createDevServerConfig(
      urls.lanUrlForConfig,
      HOST,
      port
    );
    const devServer = new WebpackDevServer(compiler, serverConfig);
    // Launch WebpackDevServer.
    devServer.listen(port, HOST, (err) => {
      if (err) {
        return console.log(err);
      }

      if (isInteractive) {
        clearConsole();
      }

      console.log(chalk.cyan('Starting the development server...\n'));
      openBrowser(urls.localUrlForBrowser);
    });

    const stop = () => {
      devServer.close();
      process.exit();
    };

    process.on('SIGINT', stop);
    process.on('SIGTERM', stop);
    process.stdin.on('end', stop);
  })
  .catch(err => {
    if (err && err.message) {
      console.log(err.message);
    }
    process.exit(1);
  });
